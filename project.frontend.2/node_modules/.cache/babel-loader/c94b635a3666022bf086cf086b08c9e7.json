{"ast":null,"code":"var _jsxFileName = \"/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/EmployeeForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EmployeeForm(props) {\n  _s();\n\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [dni, setDNI] = useState('');\n  const [salary, setSalary] = useState(''); // const postData = () => {\n  //     const requestOptions = {\n  //         method: 'POST',\n  //         headers: { 'Content-Type': 'application/json' },\n  //         body: JSON.stringify({ Name: firstName, Surname: lastName, DNI: dni, Salary: salary})\n  //     };\n  //     console.log(requestOptions.body)\n  //     fetch('http://localhost:3000/api/employees/create', requestOptions)\n  //         .then(response => response.json())\n  // }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.onSubmit({\n      Name: firstName,\n      Surname: lastName,\n      DNI: dni,\n      Salary: salary\n    });\n    setFirstName(\"\");\n    setLastName(\"\");\n    setDNI(\"\");\n    setSalary(\"\");\n  }; //useEffect(() => {\n  // POST request using fetch inside useEffect React hook\n  // const requestOptions = {\n  //     method: 'POST',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify({ Name: firstName, Surname: lastName, Dni: dni, Salary: salary,  })\n  // };\n  // fetch('hhttp://localhost:3000/api/employees/create', requestOptions)\n  //     .then(response => response.json())\n  //.then(data => setPostId(data.id));\n  // empty dependency array means this effect will only run once (like componentDidMount in classes)\n  //}, []);\n  //const teamId = this.props.teamId\n  // useEffect(() => {\n  //     fetch(\"http://localhost:3000/api/teams/create\")\n  //       .then(res => res.json())\n  //       .then(\n  //         (result) => {\n  //         //   setIsLoaded(true);\n  //           setEmployees(result.data);\n  //         },\n  //         // Nota: es importante manejar errores aquÃ­ y no en \n  //         // un bloque catch() para que no interceptemos errores\n  //         // de errores reales en los componentes.\n  //         (error) => {\n  //         //   setIsLoaded(true);\n  //           setError(error);\n  //         }\n  //       )\n  //   }, [])\n\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"First Name\",\n        onChange: e => setFirstName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Last Name\",\n        onChange: e => setLastName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"DNI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"DNI\",\n        onChange: e => setDNI(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this), \"  \", /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Salary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Salary\",\n        onChange: e => setSalary(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EmployeeForm, \"pRmPRNg04vG0LjQT8u1Ml7yD+ZM=\");\n\n_c = EmployeeForm;\nexport default EmployeeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmployeeForm\");","map":{"version":3,"sources":["/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/EmployeeForm.js"],"names":["React","useState","useEffect","Button","Form","EmployeeForm","props","firstName","setFirstName","lastName","setLastName","dni","setDNI","salary","setSalary","handleSubmit","e","preventDefault","onSubmit","Name","Surname","DNI","Salary","target","value"],"mappings":"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","sourcesContent":["import React ,{  useState, useEffect } from 'react'\nimport { Button, Form } from 'semantic-ui-react'\n\nfunction EmployeeForm(props){\n\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [dni, setDNI] = useState('');\n    const [salary, setSalary] = useState('');\n\n    // const postData = () => {\n    //     const requestOptions = {\n    //         method: 'POST',\n    //         headers: { 'Content-Type': 'application/json' },\n    //         body: JSON.stringify({ Name: firstName, Surname: lastName, DNI: dni, Salary: salary})\n    //     };\n    //     console.log(requestOptions.body)\n    //     fetch('http://localhost:3000/api/employees/create', requestOptions)\n    //         .then(response => response.json())\n        \n    // }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n    \n        props.onSubmit({\n          Name: firstName,\n          Surname: lastName,\n          DNI: dni,\n          Salary: salary,\n        });\n\n        setFirstName(\"\");\n        setLastName(\"\");\n        setDNI(\"\");\n        setSalary(\"\");\n      };\n    \n    //useEffect(() => {\n        // POST request using fetch inside useEffect React hook\n        // const requestOptions = {\n        //     method: 'POST',\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify({ Name: firstName, Surname: lastName, Dni: dni, Salary: salary,  })\n        // };\n        // fetch('hhttp://localhost:3000/api/employees/create', requestOptions)\n        //     .then(response => response.json())\n            //.then(data => setPostId(data.id));\n    \n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n    //}, []);\n\n    //const teamId = this.props.teamId\n\n    // useEffect(() => {\n    //     fetch(\"http://localhost:3000/api/teams/create\")\n    //       .then(res => res.json())\n    //       .then(\n    //         (result) => {\n    //         //   setIsLoaded(true);\n    //           setEmployees(result.data);\n    //         },\n    //         // Nota: es importante manejar errores aquÃ­ y no en \n    //         // un bloque catch() para que no interceptemos errores\n    //         // de errores reales en los componentes.\n    //         (error) => {\n    //         //   setIsLoaded(true);\n    //           setError(error);\n    //         }\n    //       )\n    //   }, [])\n\n    return(\n        \n    <Form onSubmit={handleSubmit}>\n    <Form.Field>\n        <label>First Name</label>\n        <input placeholder='First Name' onChange={(e) => setFirstName(e.target.value)}/>\n    </Form.Field>\n    <Form.Field>\n        <label>Last Name</label>\n        <input placeholder='Last Name' onChange={(e) => setLastName(e.target.value)} />\n    </Form.Field>\n    <Form.Field>\n        <label>DNI</label>\n        <input placeholder='DNI' onChange={(e) => setDNI(e.target.value)} />\n    </Form.Field>  <Form.Field>\n        <label>Salary</label>\n        <input placeholder='Salary' onChange={(e) => setSalary(e.target.value)} />\n    </Form.Field>\n    \n    <Button type='submit' onClick={handleSubmit} >Submit</Button>\n</Form>\n    )\n}\n\nexport default EmployeeForm;"]},"metadata":{},"sourceType":"module"}