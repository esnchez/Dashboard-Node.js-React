{"ast":null,"code":"var _jsxFileName = \"/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/EmployeeForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EmployeeForm() {\n  _s();\n\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [dni, setDNI] = useState('');\n  const [salary, setSalary] = useState('');\n\n  const postData = () => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        Name: firstName,\n        Surname: lastName,\n        Dni: dni,\n        Salary: salary\n      })\n    };\n    fetch('hhttp://localhost:3000/api/employees/create', requestOptions).then(response => response.json());\n  }; //useEffect(() => {\n  // POST request using fetch inside useEffect React hook\n  // const requestOptions = {\n  //     method: 'POST',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify({ Name: firstName, Surname: lastName, Dni: dni, Salary: salary,  })\n  // };\n  // fetch('hhttp://localhost:3000/api/employees/create', requestOptions)\n  //     .then(response => response.json())\n  //.then(data => setPostId(data.id));\n  // empty dependency array means this effect will only run once (like componentDidMount in classes)\n  //}, []);\n  //const teamId = this.props.teamId\n  // useEffect(() => {\n  //     fetch(\"http://localhost:3000/api/teams/create\")\n  //       .then(res => res.json())\n  //       .then(\n  //         (result) => {\n  //         //   setIsLoaded(true);\n  //           setEmployees(result.data);\n  //         },\n  //         // Nota: es importante manejar errores aquí y no en \n  //         // un bloque catch() para que no interceptemos errores\n  //         // de errores reales en los componentes.\n  //         (error) => {\n  //         //   setIsLoaded(true);\n  //           setError(error);\n  //         }\n  //       )\n  //   }, [])\n\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"First Name\",\n        onChange: e => setFirstName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Last Name\",\n        onChange: e => setLastName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"DNI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"DNI\",\n        onChange: e => setDNI(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this), \"  \", /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Salary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Salary\",\n        onChange: e => setSalary(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      onClick: postData,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EmployeeForm, \"pRmPRNg04vG0LjQT8u1Ml7yD+ZM=\");\n\n_c = EmployeeForm;\nexport default EmployeeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmployeeForm\");","map":{"version":3,"sources":["/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/EmployeeForm.js"],"names":["React","useState","useEffect","Button","Form","EmployeeForm","firstName","setFirstName","lastName","setLastName","dni","setDNI","salary","setSalary","postData","requestOptions","method","headers","body","JSON","stringify","Name","Surname","Dni","Salary","fetch","then","response","json","e","target","value"],"mappings":"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","sourcesContent":["import React ,{  useState, useEffect } from 'react'\nimport { Button, Form } from 'semantic-ui-react'\n\nfunction EmployeeForm(){\n\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [dni, setDNI] = useState('');\n    const [salary, setSalary] = useState('');\n\n    const postData = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ Name: firstName, Surname: lastName, Dni: dni, Salary: salary,  })\n        };\n        fetch('hhttp://localhost:3000/api/employees/create', requestOptions)\n            .then(response => response.json())\n    }\n    \n    //useEffect(() => {\n        // POST request using fetch inside useEffect React hook\n        // const requestOptions = {\n        //     method: 'POST',\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify({ Name: firstName, Surname: lastName, Dni: dni, Salary: salary,  })\n        // };\n        // fetch('hhttp://localhost:3000/api/employees/create', requestOptions)\n        //     .then(response => response.json())\n            //.then(data => setPostId(data.id));\n    \n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n    //}, []);\n\n    //const teamId = this.props.teamId\n\n    // useEffect(() => {\n    //     fetch(\"http://localhost:3000/api/teams/create\")\n    //       .then(res => res.json())\n    //       .then(\n    //         (result) => {\n    //         //   setIsLoaded(true);\n    //           setEmployees(result.data);\n    //         },\n    //         // Nota: es importante manejar errores aquí y no en \n    //         // un bloque catch() para que no interceptemos errores\n    //         // de errores reales en los componentes.\n    //         (error) => {\n    //         //   setIsLoaded(true);\n    //           setError(error);\n    //         }\n    //       )\n    //   }, [])\n\n    return(\n    <Form>\n    <Form.Field>\n        <label>First Name</label>\n        <input placeholder='First Name' onChange={(e) => setFirstName(e.target.value)}/>\n    </Form.Field>\n    <Form.Field>\n        <label>Last Name</label>\n        <input placeholder='Last Name' onChange={(e) => setLastName(e.target.value)} />\n    </Form.Field>\n    <Form.Field>\n        <label>DNI</label>\n        <input placeholder='DNI' onChange={(e) => setDNI(e.target.value)} />\n    </Form.Field>  <Form.Field>\n        <label>Salary</label>\n        <input placeholder='Salary' onChange={(e) => setSalary(e.target.value)} />\n    </Form.Field>\n    \n    <Button type='submit' onClick={postData} >Submit</Button>\n</Form>\n    )\n}\n\nexport default EmployeeForm;"]},"metadata":{},"sourceType":"module"}