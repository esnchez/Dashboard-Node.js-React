{"ast":null,"code":"var _jsxFileName = \"/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/Teams.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Table } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Teams(props) {\n  _s();\n\n  const [error, setError] = useState(null); //const [isLoaded, setIsLoaded] = useState(false);\n\n  const [items, setItems] = useState([]);\n  const [showTeams, setShowTeams] = useState(false);\n  const companyId = props.id;\n  console.log(\"im receiving the \", companyId);\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/companies/\" + companyId).then(res => res.json()).then(result => {\n      //setIsLoaded(true);\n      setItems(result.data);\n      setShowTeams(true);\n    }, // Nota: es importante manejar errores aquí y no en \n    // un bloque catch() para que no interceptemos errores\n    // de errores reales en los componentes.\n    error => {\n      //setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  const pulsar = () => {};\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  } //else if (!isLoaded) {\n  //return <div>Loading...</div>;}\n  else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", showTeams && /*#__PURE__*/_jsxDEV(Table, {\n        class: \"ui striped table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Employees\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [\" \", items.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n            class: \"center aligned\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => pulsar(),\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  class: \"eye icon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 33\n            }, this)]\n          }, item.TeamId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Teams, \"a1o4vVuiJa3odEsbphhUeXXv2Uc=\");\n\n_c = Teams;\n\nvar _c;\n\n$RefreshReg$(_c, \"Teams\");","map":{"version":3,"sources":["/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/Teams.js"],"names":["React","useEffect","useState","Table","Teams","props","error","setError","items","setItems","showTeams","setShowTeams","companyId","id","console","log","fetch","then","res","json","result","data","pulsar","message","map","item","Name","Type","TeamId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,KAAT,QAAsB,mBAAtB;;AAIA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC,CADiC,CAEjC;;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AAGA,QAAMU,SAAS,GAAGP,KAAK,CAACQ,EAAxB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCH,SAAjC;AAKAX,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,KAAK,CAAC,yCAAyCJ,SAA1C,CAAL,CAEKK,IAFL,CAEUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAFjB,EAGKF,IAHL,CAISG,MAAD,IAAY;AACR;AACAX,MAAAA,QAAQ,CAACW,MAAM,CAACC,IAAR,CAAR;AACAV,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,KART,EASQ;AACA;AACA;AACCL,IAAAA,KAAD,IAAW;AACP;AACAC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAfT;AAiBH,GAlBQ,EAkBN,EAlBM,CAAT;;AAqBA,QAAMgB,MAAM,GAAG,MAAM,CAEpB,CAFD;;AAIA,MAAIhB,KAAJ,EAAW;AACP,wBAAO;AAAA,4BAAaA,KAAK,CAACiB,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,CAGA;AACA;AAJA,OAKK;AACD,wBACI;AAAA,sBAAQb,SAAS,iBACb,QAAC,KAAD;AAAO,QAAA,KAAK,EAAC,kBAAb;AAAA,gCACI;AAAA,iCACI;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI;AAAA,0BACIF,KAAK,CAACgB,GAAN,CAAUC,IAAI,iBACV;AAAsB,YAAA,KAAK,EAAC,gBAA5B;AAAA,oCACI;AAAA,wBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA,wBAAKD,IAAI,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAA,qCACI;AAAQ,gBAAA,OAAO,EAAE,MAAML,MAAM,EAA7B;AAAA,uCACI;AAAG,kBAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAHJ;AAAA,aAASG,IAAI,CAACG,MAAd;AAAA;AAAA;AAAA;AAAA,kBADJ,CADJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA4BH;AACJ;;GAzEuBxB,K;;KAAAA,K","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport { Table } from 'semantic-ui-react'\n\n\n\nexport default function Teams(props) {\n    const [error, setError] = useState(null);\n    //const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n    const [showTeams, setShowTeams] = useState(false);\n\n\n    const companyId = props.id\n    console.log(\"im receiving the \", companyId)\n\n\n\n\n    useEffect(() => {\n        fetch(\"http://localhost:3000/api/companies/\" + companyId)\n        \n            .then(res => res.json())\n            .then(\n                (result) => {\n                    //setIsLoaded(true);\n                    setItems(result.data);\n                    setShowTeams(true)\n                },\n                // Nota: es importante manejar errores aquí y no en \n                // un bloque catch() para que no interceptemos errores\n                // de errores reales en los componentes.\n                (error) => {\n                    //setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, [])\n\n\n    const pulsar = () => {\n\n    }\n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    }\n    //else if (!isLoaded) {\n    //return <div>Loading...</div>;}\n    else {\n        return (\n            <div> { showTeams &&\n                <Table class=\"ui striped table\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Type</th>\n                            <th>Employees</th>\n                        </tr>\n                    </thead>\n                    <tbody> {\n                        items.map(item => (\n                            <tr key={item.TeamId} class=\"center aligned\">\n                                <td>{item.Name}</td>\n                                <td>{item.Type}</td>\n                                <td >\n                                    <button onClick={() => pulsar()}>\n                                        <i class=\"eye icon\"></i>\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>}\n            </div>\n\n\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}