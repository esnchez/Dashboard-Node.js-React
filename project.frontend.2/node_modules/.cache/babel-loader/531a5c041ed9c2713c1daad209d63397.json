{"ast":null,"code":"var _jsxFileName = \"/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/Companies2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Table } from 'semantic-ui-react';\nimport Teams from \"./Teams\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Companies2() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [showTeams, setShowTeams] = useState(false);\n  const [teamId, setTeamId] = useState(null); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/companies\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result.data);\n    }, // Nota: es importante manejar errores aquí y no en \n    // un bloque catch() para que no interceptemos errores\n    // de errores reales en los componentes.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  const pulsar = id => {\n    setTeamId(id);\n    setShowTeams(true);\n    console.log(id); // console.log(\"after\", trigger)\n  };\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        class: \"ui striped table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Company Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sector\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"City \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Teams\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [\" \", items.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n            class: \"center aligned\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Sector\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.City\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => pulsar(item.CompanyId),\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  class: \"eye icon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)]\n          }, item.CompanyId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), showTeams && /*#__PURE__*/_jsxDEV(Teams, {\n        teamId: teamId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Companies2, \"D/2/MSqLFH4ozHk0L1mw7csz3Ws=\");\n\n_c = Companies2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Companies2\");","map":{"version":3,"sources":["/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/Companies2.js"],"names":["React","useEffect","useState","Table","Teams","Companies2","error","setError","isLoaded","setIsLoaded","items","setItems","showTeams","setShowTeams","teamId","setTeamId","fetch","then","res","json","result","data","pulsar","id","console","log","message","map","item","Name","Sector","City","CompanyId"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Table } from 'semantic-ui-react'\n\nimport Teams from \"./Teams\"\n\n\nexport default function Companies2() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const [items, setItems] = useState([]);\n\n  const [showTeams, setShowTeams] = useState(false);\n  \n  const [teamId, setTeamId] = useState(null);\n\n\n\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/companies\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setItems(result.data);\n        },\n        // Nota: es importante manejar errores aquí y no en \n        // un bloque catch() para que no interceptemos errores\n        // de errores reales en los componentes.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n\n\n  const pulsar = (id) => {\n    setTeamId(id)\n    setShowTeams(true)\n\n    console.log(id)\n    // console.log(\"after\", trigger)\n\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n\n      <div>\n        <Table class=\"ui striped table\">\n          <thead>\n            <tr >\n              <th>Company Name</th>\n              <th>Sector</th>\n              <th>City </th>\n              <th>Teams</th>\n            </tr>\n          </thead>\n          <tbody> {\n            items.map(item => (\n              <tr key={item.CompanyId} class=\"center aligned\">\n                <td>{item.Name}</td>\n                <td>{item.Sector}</td>\n                <td>{item.City}</td>\n                <td>\n                  <button onClick ={() => pulsar(item.CompanyId)}>\n                  <i class=\"eye icon\"></i>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table> \n\n        {showTeams && <Teams teamId = {teamId} /> }\n      </div> \n\n      \n\n    )\n    \n    \n   \n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}