{"ast":null,"code":"var _jsxFileName = \"/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/CompaniesList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Companies from \"./Companies\";\nimport { Table } from 'semantic-ui-react';\nimport Teams from \"./Teams\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CompaniesList() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [showTeams, setShowTeams] = useState(false);\n  const [teamId, setTeamId] = useState(null); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/companies\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result.data);\n    }, // Nota: es importante manejar errores aquí y no en \n    // un bloque catch() para que no interceptemos errores\n    // de errores reales en los componentes.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  const pulsar = id => {\n    setTeamId(id);\n    setShowTeams(true);\n    console.log(id);\n  }; // if (error) {\n  //   return <div>Error: {error.message}</div>;\n  // } else if (!isLoaded) {\n  //   return <div>Loading...</div>;\n  // } else {\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Companies, {\n        compArray: items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Teams, {\n        teamId: teamId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CompaniesList, \"D/2/MSqLFH4ozHk0L1mw7csz3Ws=\");\n\n_c = CompaniesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompaniesList\");","map":{"version":3,"sources":["/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/CompaniesList.js"],"names":["React","useEffect","useState","Companies","Table","Teams","CompaniesList","error","setError","isLoaded","setIsLoaded","items","setItems","showTeams","setShowTeams","teamId","setTeamId","fetch","then","res","json","result","data","pulsar","id","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AAEA,OAAOC,KAAP,MAAkB,SAAlB;;AAGA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACtC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,IAAD,CAApC,CARsC,CAatC;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,KAAK,CAAC,qCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVX,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACS,MAAM,CAACC,IAAR,CAAR;AACD,KANL,EAOI;AACA;AACA;AACCf,IAAAA,KAAD,IAAW;AACTG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAbL;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;;AAmBA,QAAMgB,MAAM,GAAIC,EAAD,IAAQ;AACrBR,IAAAA,SAAS,CAACQ,EAAD,CAAT;AACAV,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEAW,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AAED,GAND,CAnCsC,CA2CtC;AACA;AACA;AACA;AACA;;;AACA,sBAEE;AAAA,4BA8BI;AAAA,6BACC,QAAC,SAAD;AAAW,QAAA,SAAS,EAAIb;AAAxB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YA9BJ,eAkCI;AAAA,6BACC,QAAC,KAAD;AAAO,QAAA,MAAM,EAAEI;AAAf;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAlCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAkDD;;GAlGuBT,a;;KAAAA,a","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Companies from \"./Companies\";\nimport { Table } from 'semantic-ui-react'\n\nimport Teams from \"./Teams\"\n\n\nexport default function CompaniesList() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const [items, setItems] = useState([]);\n\n  const [showTeams, setShowTeams] = useState(false);\n\n  const [teamId, setTeamId] = useState(null);\n\n\n\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/companies\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setItems(result.data);\n        },\n        // Nota: es importante manejar errores aquí y no en \n        // un bloque catch() para que no interceptemos errores\n        // de errores reales en los componentes.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n\n\n  const pulsar = (id) => {\n    setTeamId(id)\n    setShowTeams(true)\n\n    console.log(id)\n\n  }\n\n  // if (error) {\n  //   return <div>Error: {error.message}</div>;\n  // } else if (!isLoaded) {\n  //   return <div>Loading...</div>;\n  // } else {\n  return (\n\n    <div>\n\n        \n\n        {/* <Table class=\"ui striped table\">\n        <thead>\n        <tr >\n              <th>Company Name</th>\n               <th>Sector</th>\n            <th>City </th>\n              <th>Teams</th>\n            </tr>\n         </thead>\n          <tbody> { \n        //     items.map(item => (\n        //       <tr key={item.CompanyId} class=\"center aligned\">\n        //         <td>{item.Name}</td>\n        //         <td>{item.Sector}</td>\n        //         <td>{item.City}</td>\n        //         <td>\n        //           <button onClick ={() => pulsar(item.CompanyId)}>\n        //           <i class=\"eye icon\"></i>\n        //           </button>\n        //         </td>\n        //       </tr>\n        //     ))}\n        //   </tbody>\n        // </Table> :\n\n        */}\n        <div>\n        {<Companies compArray = {items}/>}\n        </div>\n\n        <div>\n        {<Teams teamId={teamId} />}\n        </div>\n    \n\n    </div>\n\n\n\n  )\n\n\n\n\n}\n\n"]},"metadata":{},"sourceType":"module"}