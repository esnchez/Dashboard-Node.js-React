{"ast":null,"code":"var _jsxFileName = \"/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/CompaniesList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Companies from \"./Companies\";\nimport { Table } from 'semantic-ui-react';\nimport Teams from \"./Teams\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CompaniesList() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [hideCompanies, setHideCompanies] = useState(true);\n  const [teamId, setTeamId] = useState(null); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/companies\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result.data);\n    }, // Nota: es importante manejar errores aquí y no en \n    // un bloque catch() para que no interceptemos errores\n    // de errores reales en los componentes.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  const pulsar = id => {\n    setTeamId(id);\n    setHideCompanies(!hideCompanies);\n    console.log(id);\n  }; // if (error) {\n  //   return <div>Error: {error.message}</div>;\n  // } else if (!isLoaded) {\n  //   return <div>Loading...</div>;\n  // } else {\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: hideCompanies && /*#__PURE__*/_jsxDEV(Table, {\n      class: \"ui striped table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Company Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Sector\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"City \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Teams\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [\" \", items.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n          class: \"center aligned\",\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Sector\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.City\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => pulsar(item.CompanyId),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"eye icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)]\n        }, item.CompanyId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CompaniesList, \"2DNNmIMlC6hjAzlBUEdJtbPdhac=\");\n\n_c = CompaniesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompaniesList\");","map":{"version":3,"sources":["/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/CompaniesList.js"],"names":["React","useEffect","useState","Companies","Table","Teams","CompaniesList","error","setError","isLoaded","setIsLoaded","items","setItems","hideCompanies","setHideCompanies","teamId","setTeamId","fetch","then","res","json","result","data","pulsar","id","console","log","map","item","Name","Sector","City","CompanyId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AAEA,OAAOC,KAAP,MAAkB,SAAlB;;AAGA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACtC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,IAAD,CAAlD;AAEA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,IAAD,CAApC,CARsC,CAatC;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,KAAK,CAAC,qCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVX,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACS,MAAM,CAACC,IAAR,CAAR;AACD,KANL,EAOI;AACA;AACA;AACCf,IAAAA,KAAD,IAAW;AACTG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAbL;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;;AAmBA,QAAMgB,MAAM,GAAIC,EAAD,IAAQ;AACrBR,IAAAA,SAAS,CAACQ,EAAD,CAAT;AACAV,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AAEAY,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AAED,GAND,CAnCsC,CA2CtC;AACA;AACA;AACA;AACA;;;AACA,sBAEE;AAAA,cACIX,aAAa,iBAEf,QAAC,KAAD;AAAO,MAAA,KAAK,EAAC,kBAAb;AAAA,8BACA;AAAA,+BACA;AAAA,kCACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADN,eAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFP,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAIM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADA,eASE;AAAA,wBACEF,KAAK,CAACgB,GAAN,CAAUC,IAAI,iBACZ;AAAyB,UAAA,KAAK,EAAC,gBAA/B;AAAA,kCACE;AAAA,sBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAKD,IAAI,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,sBAAKF,IAAI,CAACG;AAAV;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA,mCACE;AAAQ,cAAA,OAAO,EAAG,MAAMR,MAAM,CAACK,IAAI,CAACI,SAAN,CAA9B;AAAA,qCACA;AAAG,gBAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA,WAASJ,IAAI,CAACI,SAAd;AAAA;AAAA;AAAA;AAAA,gBADF,CADF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,UAFF;AA6CD;;GA7FuB1B,a;;KAAAA,a","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Companies from \"./Companies\";\nimport { Table } from 'semantic-ui-react'\n\nimport Teams from \"./Teams\"\n\n\nexport default function CompaniesList() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const [items, setItems] = useState([]);\n\n  const [hideCompanies, setHideCompanies] = useState(true);\n\n  const [teamId, setTeamId] = useState(null);\n\n\n\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/companies\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setItems(result.data);\n        },\n        // Nota: es importante manejar errores aquí y no en \n        // un bloque catch() para que no interceptemos errores\n        // de errores reales en los componentes.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n\n\n  const pulsar = (id) => {\n    setTeamId(id)\n    setHideCompanies(!hideCompanies)\n\n    console.log(id)\n\n  }\n\n  // if (error) {\n  //   return <div>Error: {error.message}</div>;\n  // } else if (!isLoaded) {\n  //   return <div>Loading...</div>;\n  // } else {\n  return (\n\n    <div>\n      { hideCompanies &&\n\n      <Table class=\"ui striped table\">\n      <thead>\n      <tr >\n            <th>Company Name</th>\n             <th>Sector</th>\n          <th>City </th>\n            <th>Teams</th>\n          </tr>\n       </thead>\n        <tbody> { \n          items.map(item => (\n            <tr key={item.CompanyId} class=\"center aligned\">\n              <td>{item.Name}</td>\n              <td>{item.Sector}</td>\n              <td>{item.City}</td>\n              <td>\n                <button onClick ={() => pulsar(item.CompanyId)}>\n                <i class=\"eye icon\"></i>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table> \n\n      }\n\n        {/* <div>\n        {<Companies compArray = {items}/>}\n        </div> */}\n\n    </div>\n\n\n\n  )\n\n\n\n\n}\n\n"]},"metadata":{},"sourceType":"module"}