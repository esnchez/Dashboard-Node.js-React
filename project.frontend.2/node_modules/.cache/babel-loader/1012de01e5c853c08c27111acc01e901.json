{"ast":null,"code":"var _jsxFileName = \"/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/Companies2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Table } from 'semantic-ui-react';\nimport Teams from \"./Teams\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Companies2() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [headers, setHeaders] = useState([]);\n  const [items, setItems] = useState([]);\n  const [trigger, setTrigger] = useState(false);\n  const [id, setId] = useState(null); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/companies\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      console.log(result.data);\n      setHeaders(Object.keys(result.data[0]));\n      setItems(result.data);\n    }, // Nota: es importante manejar errores aquí y no en \n    // un bloque catch() para que no interceptemos errores\n    // de errores reales en los componentes.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  const pulsar = id => {\n    setId(id);\n    console.log(trigger);\n    setTrigger(true);\n    console.log(\"after\", trigger);\n  };\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        class: \"ui striped table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Company Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sector\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"City \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [\" \", items.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Sector\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.City\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)]\n          }, item.CompanyId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this); // <ul>\n    //   {\n    //     items.map(item => (\n    //       <li key={item.CompanyId}>\n    //         <button onClick={() =>\n    //           pulsar(item.CompanyId)}>\n    //           {item.Name}\n    //         </button>\n    //       </li>\n    //     ))}\n\n    {\n      /* {trigger && <Teams id={this.props.id}/>} */\n    } // </ul>\n  }\n}\n\n_s(Companies2, \"M3Exg6QWebYQi1BNN7qoEWJBoOM=\");\n\n_c = Companies2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Companies2\");","map":{"version":3,"sources":["/home/eric/Desktop/ITQ-project/ITQ/project.frontend.2/src/components/Companies2.js"],"names":["React","useEffect","useState","Table","Teams","Companies2","error","setError","isLoaded","setIsLoaded","headers","setHeaders","items","setItems","trigger","setTrigger","id","setId","fetch","then","res","json","result","console","log","data","Object","keys","pulsar","message","map","item","Name","Sector","City","CompanyId"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Table } from 'semantic-ui-react'\n\nimport Teams from \"./Teams\"\n\n\nexport default function Companies2() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const [headers, setHeaders] = useState([]);\n  const [items, setItems] = useState([]);\n\n  const [trigger, setTrigger] = useState(false);\n  const [id, setId] = useState(null);\n\n\n\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/companies\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          console.log(result.data)\n          setHeaders(Object.keys(result.data[0]))\n          \n          setItems(result.data);\n        },\n        // Nota: es importante manejar errores aquí y no en \n        // un bloque catch() para que no interceptemos errores\n        // de errores reales en los componentes.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n\n\n  const pulsar = (id) => {\n    setId(id)\n    console.log(trigger)\n    setTrigger(true)\n    console.log(\"after\", trigger)\n\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n\n      <div>\n        \n        <Table class=\"ui striped table\">\n          <thead>\n            <tr>\n              <th>Company Name</th>\n              <th>Sector</th>\n              <th>City </th>\n            </tr>\n          </thead>\n          <tbody> {\n            items.map(item => (\n              <tr key = {item.CompanyId}>\n                <td>{item.Name}</td>\n                <td>{item.Sector}</td>\n                <td>{item.City}</td>\n              </tr>\n            ))}          \n\n          </tbody>\n        </Table>\n      </div>\n    )\n    // <ul>\n    //   {\n    //     items.map(item => (\n    //       <li key={item.CompanyId}>\n    //         <button onClick={() =>\n    //           pulsar(item.CompanyId)}>\n    //           {item.Name}\n    //         </button>\n\n    //       </li>\n    //     ))}\n\n    {/* {trigger && <Teams id={this.props.id}/>} */ }\n    // </ul>\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}